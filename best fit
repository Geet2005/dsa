#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct Block {
    int size;
    bool is_free;
    struct Block* prev;
    struct Block* next;
} Block;

Block* head = NULL;

void create_block(int size) {
    Block* new_block = (Block*)malloc(sizeof(Block));
    new_block->size = size;
    new_block->is_free = true;
    new_block->prev = NULL;
    new_block->next = NULL;

    if (head == NULL) {
        head = new_block;
    } else {
        Block* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = new_block;
        new_block->prev = temp;
    }
}

void allocate_memory(int size) {
    Block* best_fit = NULL;
    Block* temp = head;

    while (temp != NULL) {
        if (temp->is_free && temp->size >= size) {
            if (best_fit == NULL || temp->size < best_fit->size) {
                best_fit = temp;
            }
        }
        temp = temp->next;
    }

    if (best_fit == NULL) {
        printf("No suitable block found for %d bytes.\n", size);
        return;
    }

    if (best_fit->size > size) {
        Block* new_block = (Block*)malloc(sizeof(Block));
        new_block->size = best_fit->size - size;
        new_block->is_free = true;

        new_block->next = best_fit->next;
        if (new_block->next != NULL)
            new_block->next->prev = new_block;

        new_block->prev = best_fit;
        best_fit->next = new_block;

        best_fit->size = size;
    }

    best_fit->is_free = false;

    printf("Allocated %d bytes.\n", size);
}

void free_memory_by_index(int index) {
    Block* temp = head;
    int i = 1;

    while (temp != NULL) {
        if (!temp->is_free) {
            if (i == index) {
                temp->is_free = true;
                printf("Freed block #%d.\n", index);

                // Merge with previous block if free
                if (temp->prev && temp->prev->is_free) {
                    Block* to_merge = temp;
                    Block* prev = temp->prev;
                    prev->size += to_merge->size;
                    prev->next = to_merge->next;
                    if (to_merge->next)
                        to_merge->next->prev = prev;
                    temp = prev;
                    free(to_merge);
                }

                // Merge with next block if free
                if (temp->next && temp->next->is_free) {
                    Block* to_delete = temp->next;
                    temp->size += to_delete->size;
                    temp->next = to_delete->next;
                    if (to_delete->next)
                        to_delete->next->prev = temp;
                    free(to_delete);
                }

                return;
            }
            i++;
        }
        temp = temp->next;
    }

    printf("Allocated block #%d not found.\n", index);
}

void display_memory() {
    Block* temp = head;
    int index = 1;
    printf("\nMemory Blocks:\n");
    printf("--------------------------\n");
    while (temp != NULL) {
        if (temp->is_free) {
            printf("Size: %4d | Free\n", temp->size);
        } else {
            printf("Size: %4d | Used (Block #%d)\n", temp->size, index);
            index++;
        }
        temp = temp->next;
    }
    printf("--------------------------\n");
}

int main() {
    int choice, size, block_index;

    create_block(100);
    create_block(500);
    create_block(200);
    create_block(300);
    create_block(600);

    printf("\n1. Allocate\n2. Free by Block Number\n3. Display\n4. Exit\n");

    while (1) {
        printf("\nEnter choice: ");
        scanf("%d", &choice);

        if (choice == 1) {
            printf("Enter size to allocate: ");
            scanf("%d", &size);
            allocate_memory(size);
        } else if (choice == 2) {
            printf("Enter block number to free: ");
            scanf("%d", &block_index);
            free_memory_by_index(block_index);
        } else if (choice == 3) {
            display_memory();
        } else if (choice == 4) {
            printf("Exited\n");
            break;
        } else {
            printf("Invalid choice.\n");
        }
    }

    return 0;
}
