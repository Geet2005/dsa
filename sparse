#include <stdio.h>
int convertToTuple(int matrix[10][10], int rows, int cols, int tuple[50][3]) {
    int k = 1;
    for (int i = 0; i < rows; i++){
        for (int j = 0; j < cols; j++){
            if (matrix[i][j] != 0) {
                tuple[k][0] = i;
                tuple[k][1] = j;
                tuple[k][2] = matrix[i][j];
                k++;
            }
        }
    }

    tuple[0][0] = rows;
    tuple[0][1] = cols;
    tuple[0][2] = k - 1; 
    return k;
}

void printTuple(int tuple[50][3]) {
    int n = tuple[0][2];
    printf("Row\tCol\tVal\n");
    for (int i = 0; i <= n; i++)
        printf("%d\t%d\t%d\n", tuple[i][0], tuple[i][1], tuple[i][2]);
}
void addTuples(int A[50][3], int B[50][3], int sum[50][3]) {
    int i = 1, j = 1, k = 1;
    if (A[0][0] != B[0][0] || A[0][1] != B[0][1]) {
        printf("Addition not possible, dimensions don't match.\n");
        return;
    }

    sum[0][0] = A[0][0];
    sum[0][1] = A[0][1];

    while (i <= A[0][2] && j <= B[0][2]) {
        if (A[i][0] < B[j][0] || (A[i][0] == B[j][0] && A[i][1] < B[j][1])) {
            sum[k][0] = A[i][0];
            sum[k][1] = A[i][1];
            sum[k][2] = A[i][2];
            i++;
        } else if (B[j][0] < A[i][0] || (B[j][0] == A[i][0] && B[j][1] < A[i][1])) {
            sum[k][0] = B[j][0];
            sum[k][1] = B[j][1];
            sum[k][2] = B[j][2];
            j++;
        } else {
            sum[k][0] = A[i][0];
            sum[k][1] = A[i][1];
            sum[k][2] = A[i][2] + B[j][2];
            i++; j++;
        }
        k++;
    }
    while (i <= A[0][2]) {
        sum[k][0] = A[i][0];
        sum[k][1] = A[i][1];
        sum[k][2] = A[i][2];
        i++; k++;
    }
    while (j <= B[0][2]) {
        sum[k][0] = B[j][0];
        sum[k][1] = B[j][1];
        sum[k][2] = B[j][2];
        j++; k++;
    }

    sum[0][2] = k - 1;
}
void transposeTuple(int tuple[50][3], int trans[50][3]) {
    int k = 1;
    trans[0][0] = tuple[0][1]; 
    trans[0][1] = tuple[0][0]; 
    trans[0][2] = tuple[0][2];

    for (int col = 0; col < tuple[0][1]; col++) {
        for (int i = 1; i <= tuple[0][2]; i++) {
            if (tuple[i][1] == col) {
                trans[k][0] = tuple[i][1];  
                trans[k][1] = tuple[i][0];  
                trans[k][2] = tuple[i][2];
                k++;
            }
        }
    }
}
int main() {
    int A[10][10], B[10][10];
    int tupleA[50][3], tupleB[50][3], sumTuple[50][3], transTuple[50][3];
    int rows, cols;

    printf("Enter rows and columns (max 10): ");
    scanf("%d%d", &rows, &cols);

    printf("\nEnter Matrix A:\n");
    for (int i = 0; i < rows; i++)
        for (int j = 0; j < cols; j++)
            scanf("%d", &A[i][j]);

    printf("\nEnter Matrix B:\n");
    for (int i = 0; i < rows; i++)
        for (int j = 0; j < cols; j++)
            scanf("%d", &B[i][j]);

    convertToTuple(A, rows, cols, tupleA);
    convertToTuple(B, rows, cols, tupleB);

    printf("\nTuple Representation of Matrix A:\n");
    printTuple(tupleA);

    printf("\nTuple Representation of Matrix B:\n");
    printTuple(tupleB);

    addTuples(tupleA, tupleB, sumTuple);
    printf("\nSum of Matrix A and B in Tuple Format:\n");
    printTuple(sumTuple);

    transposeTuple(sumTuple, transTuple);
    printf("\nTranspose of the Sum Matrix in Tuple Format:\n");
    printTuple(transTuple);

    return 0;
}
